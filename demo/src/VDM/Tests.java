//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2013-12-05 by the VDM++ to JAVA Code Generator
// (v9.0.2 - Thu 14-Mar-2013 12:36:47 +0900)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "C:\\Users\\João\\Documents\\GitHub\\mfes_stratego\\VDM++\\Tests.rtf".

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

package VDM;

import java.util.Map;
import java.util.HashMap;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.Record;
import jp.vdmtools.VDM.Sentinel;
import jp.vdmtools.VDM.EvaluatePP;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class Tests implements EvaluatePP {

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=TestsSentinel KEEP=NO
  class TestsSentinel extends Sentinel {

    public final int testAll = 0;

    public final int testMove1 = 1;

    public final int testMove2 = 2;

    public final int testMove3 = 3;

    public final int testMove4 = 4;

    public final int testMove5 = 5;

    public final int testMove6 = 6;

    public final int testMove7 = 7;

    public final int testMove8 = 8;

    public final int testMove9 = 9;

    public final int assertTrue = 10;

    public final int testMove10 = 11;

    public final int testMove11 = 12;

    public final int testMove12 = 13;

    public final int testgetPiece = 14;

    public final int testcheckTurn = 15;

    public final int testgameEnded = 16;

    public final int testchangeTurn = 17;

    public final int testemptyPiece = 18;

    public final int testgetWinner1 = 19;

    public final int testgetWinner2 = 20;

    public final int testvalidMove1 = 21;

    public final int testvalidMove2 = 22;

    public final int testaddNewPiece = 23;

    public final int testturnChanged = 24;

    public final int testgetBoardSize = 25;

    public final int testgetClonePiece = 26;

    public final int testswapPositions = 27;

    public final int testcheckMovement1 = 28;

    public final int testcheckMovement2 = 29;

    public final int testcheckMovement3 = 30;

    public final int testcheckMovement4 = 31;

    public final int testcheckAvaiability1 = 32;

    public final int testcheckAvaiability2 = 33;

    public final int testgetOpponentColor1 = 34;

    public final int testgetOpponentColor2 = 35;

    public final int testcheckMiddlePieces1 = 36;

    public final int testcheckMiddlePieces2 = 37;

    public final int testcheckMiddlePieces3 = 38;

    public final int testcheckMiddlePieces4 = 39;

    public final int testcheckMiddlePieces5 = 40;

    public final int testcheckMiddlePieces6 = 41;

    public final int testvalidSwapPositions1 = 42;

    public final int testvalidSwapPositions2 = 43;

    public final int testcheckToPositionColor1 = 44;

    public final int testcheckToPositionColor2 = 45;

    public final int nr_functions = 46;


    public TestsSentinel () throws CGException {}


    public TestsSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=TestsSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return Boolean.TRUE;
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new TestsSentinel(this);
    }
    catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel


// ***** VDMTOOLS START Name=vdm_init_Tests KEEP=NO
  private void vdm_init_Tests () {
    try {
      setSentinel();
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Tests


// ***** VDMTOOLS START Name=Tests KEEP=NO
  public Tests () throws CGException {
    vdm_init_Tests();
  }
// ***** VDMTOOLS END Name=Tests


// ***** VDMTOOLS START Name=assertTrue#1|Boolean KEEP=NO
  static public void assertTrue (final Boolean op) throws CGException {
    if (!pre_assertTrue(op).booleanValue()) 
      UTIL.RunTime("Precondition failure in assertTrue");
    return;
  }
// ***** VDMTOOLS END Name=assertTrue#1|Boolean


// ***** VDMTOOLS START Name=pre_assertTrue#1|Boolean KEEP=NO
  static public Boolean pre_assertTrue (final Boolean op) throws CGException {
    return op;
  }
// ***** VDMTOOLS END Name=pre_assertTrue#1|Boolean


// ***** VDMTOOLS START Name=testgetBoardSize KEEP=NO
  public void testgetBoardSize () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testgetBoardSize);
    try {
      Game game = new Game();
      assertTrue(Boolean.valueOf(game.getBoardSize().intValue() == 100));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testgetBoardSize);
    }
  }
// ***** VDMTOOLS END Name=testgetBoardSize


// ***** VDMTOOLS START Name=testcheckAvaiability1 KEEP=NO
  public void testcheckAvaiability1 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testcheckAvaiability1);
    try {
      Game game = new Game();
      game.addNewPiece(new Game.Position(new Integer(0), new Integer(0)), new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      game.addNewPiece(new Game.Position(new Integer(0), new Integer(1)), new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      assertTrue(Boolean.valueOf(UTIL.equals(game.checkAvaiability(new Piece(new Rank(new String("eight")), new Color(new String("red")))), Boolean.FALSE)));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testcheckAvaiability1);
    }
  }
// ***** VDMTOOLS END Name=testcheckAvaiability1


// ***** VDMTOOLS START Name=testcheckAvaiability2 KEEP=NO
  public void testcheckAvaiability2 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testcheckAvaiability2);
    try {
      Game game = new Game();
      game.addNewPiece(new Game.Position(new Integer(0), new Integer(0)), new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      assertTrue(game.checkAvaiability(new Piece(new Rank(new String("eight")), new Color(new String("red")))));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testcheckAvaiability2);
    }
  }
// ***** VDMTOOLS END Name=testcheckAvaiability2


// ***** VDMTOOLS START Name=testaddNewPiece KEEP=NO
  public void testaddNewPiece () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testaddNewPiece);
    try {
      Game game = new Game();
      Game.Position pos = new Game.Position(new Integer(0), new Integer(0));
      game.addNewPiece(pos, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      Boolean tmpArg_v_11 = null;
      if ((tmpArg_v_11 = Boolean.valueOf(UTIL.equals(((((Piece)(game.board).get(pos)).rank).name), new String("eight")))).booleanValue()) 
        tmpArg_v_11 = Boolean.valueOf(UTIL.equals(((((Piece)(game.board).get(pos)).color).name), new String("red")));
      assertTrue(tmpArg_v_11);
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testaddNewPiece);
    }
  }
// ***** VDMTOOLS END Name=testaddNewPiece


// ***** VDMTOOLS START Name=testgetPiece KEEP=NO
  public void testgetPiece () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testgetPiece);
    try {
      Game game = new Game();
      Game.Position pos = new Game.Position(new Integer(0), new Integer(0));
      game.addNewPiece(pos, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      Boolean tmpArg_v_11 = null;
      if ((tmpArg_v_11 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos).rank).name), new String("eight")))).booleanValue()) 
        tmpArg_v_11 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos).color).name), new String("red")));
      assertTrue(tmpArg_v_11);
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testgetPiece);
    }
  }
// ***** VDMTOOLS END Name=testgetPiece


// ***** VDMTOOLS START Name=testgetClonePiece KEEP=NO
  public void testgetClonePiece () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testgetClonePiece);
    try {
      Game game = new Game();
      Game.Position pos = new Game.Position(new Integer(0), new Integer(0));
      Piece vdm_clone = null;
      game.addNewPiece(pos, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      vdm_clone = (Piece)UTIL.clone(game.getClonePiece(pos));
      Boolean tmpArg_v_13 = null;
      if ((tmpArg_v_13 = Boolean.valueOf(UTIL.equals(((vdm_clone.rank).name), new String("eight")))).booleanValue()) 
        tmpArg_v_13 = Boolean.valueOf(UTIL.equals(((vdm_clone.color).name), new String("red")));
      assertTrue(tmpArg_v_13);
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testgetClonePiece);
    }
  }
// ***** VDMTOOLS END Name=testgetClonePiece


// ***** VDMTOOLS START Name=testemptyPiece KEEP=NO
  public void testemptyPiece () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testemptyPiece);
    try {
      Game game = new Game();
      Game.Position pos = new Game.Position(new Integer(0), new Integer(0));
      game.addNewPiece(pos, game.emptyPiece());
      Boolean tmpArg_v_7 = null;
      if ((tmpArg_v_7 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos).rank).name), new String("null")))).booleanValue()) 
        tmpArg_v_7 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos).color).name), new String("null")));
      assertTrue(tmpArg_v_7);
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testemptyPiece);
    }
  }
// ***** VDMTOOLS END Name=testemptyPiece


// ***** VDMTOOLS START Name=testcheckTurn KEEP=NO
  public void testcheckTurn () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testcheckTurn);
    try {
      Game game = new Game();
      Game.Position pos = new Game.Position(new Integer(0), new Integer(0));
      game.addNewPiece(pos, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      game.turn = UTIL.ConvertToString(new String("blue"));
      assertTrue(Boolean.valueOf(UTIL.equals(game.checkTurn(pos), Boolean.FALSE)));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testcheckTurn);
    }
  }
// ***** VDMTOOLS END Name=testcheckTurn


// ***** VDMTOOLS START Name=testchangeTurn KEEP=NO
  public void testchangeTurn () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testchangeTurn);
    try {
      Game game = new Game();
      game.turn = UTIL.ConvertToString(new String("blue"));
      game.changeTurn();
      assertTrue(Boolean.valueOf(UTIL.equals((game.turn), new String("red"))));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testchangeTurn);
    }
  }
// ***** VDMTOOLS END Name=testchangeTurn


// ***** VDMTOOLS START Name=testgetOpponentColor1 KEEP=NO
  public void testgetOpponentColor1 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testgetOpponentColor1);
    try {
      Game game = new Game();
      Game.Position pos = new Game.Position(new Integer(0), new Integer(0));
      game.addNewPiece(pos, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      assertTrue(Boolean.valueOf(UTIL.equals(game.getOpponentColor(pos), new String("blue"))));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testgetOpponentColor1);
    }
  }
// ***** VDMTOOLS END Name=testgetOpponentColor1


// ***** VDMTOOLS START Name=testgetOpponentColor2 KEEP=NO
  public void testgetOpponentColor2 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testgetOpponentColor2);
    try {
      Game game = new Game();
      Game.Position pos = new Game.Position(new Integer(0), new Integer(0));
      game.addNewPiece(pos, new Piece(new Rank(new String("eight")), new Color(new String("blue"))));
      assertTrue(Boolean.valueOf(UTIL.equals(game.getOpponentColor(pos), new String("red"))));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testgetOpponentColor2);
    }
  }
// ***** VDMTOOLS END Name=testgetOpponentColor2


// ***** VDMTOOLS START Name=testcheckToPositionColor1 KEEP=NO
  public void testcheckToPositionColor1 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testcheckToPositionColor1);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      game.addNewPiece(pos1, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("eight")), new Color(new String("blue"))));
      assertTrue(game.checkToPositionColor(pos1, pos2));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testcheckToPositionColor1);
    }
  }
// ***** VDMTOOLS END Name=testcheckToPositionColor1


// ***** VDMTOOLS START Name=testcheckToPositionColor2 KEEP=NO
  public void testcheckToPositionColor2 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testcheckToPositionColor2);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      game.addNewPiece(pos1, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      assertTrue(Boolean.valueOf(UTIL.equals(game.checkToPositionColor(pos1, pos2), Boolean.FALSE)));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testcheckToPositionColor2);
    }
  }
// ***** VDMTOOLS END Name=testcheckToPositionColor2


// ***** VDMTOOLS START Name=testcheckMiddlePieces1 KEEP=NO
  public void testcheckMiddlePieces1 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testcheckMiddlePieces1);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      Game.Position pos3 = new Game.Position(new Integer(0), new Integer(2));
      Game.Position pos4 = new Game.Position(new Integer(0), new Integer(3));
      game.addNewPiece(pos1, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.addNewPiece(pos3, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.addNewPiece(pos4, new Piece(new Rank(new String("eight")), new Color(new String("blue"))));
      assertTrue(game.checkMiddlePieces(pos1, pos4));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testcheckMiddlePieces1);
    }
  }
// ***** VDMTOOLS END Name=testcheckMiddlePieces1


// ***** VDMTOOLS START Name=testcheckMiddlePieces2 KEEP=NO
  public void testcheckMiddlePieces2 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testcheckMiddlePieces2);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      Game.Position pos3 = new Game.Position(new Integer(0), new Integer(2));
      Game.Position pos4 = new Game.Position(new Integer(0), new Integer(3));
      game.addNewPiece(pos1, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("water")), new Color(new String("null"))));
      game.addNewPiece(pos3, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.addNewPiece(pos4, new Piece(new Rank(new String("eight")), new Color(new String("blue"))));
      assertTrue(game.checkMiddlePieces(pos1, pos4));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testcheckMiddlePieces2);
    }
  }
// ***** VDMTOOLS END Name=testcheckMiddlePieces2


// ***** VDMTOOLS START Name=testcheckMiddlePieces3 KEEP=NO
  public void testcheckMiddlePieces3 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testcheckMiddlePieces3);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      Game.Position pos3 = new Game.Position(new Integer(0), new Integer(2));
      Game.Position pos4 = new Game.Position(new Integer(0), new Integer(3));
      game.addNewPiece(pos1, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.addNewPiece(pos3, new Piece(new Rank(new String("eight")), new Color(new String("blue"))));
      game.addNewPiece(pos4, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      assertTrue(Boolean.valueOf(UTIL.equals(game.checkMiddlePieces(pos1, pos4), Boolean.FALSE)));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testcheckMiddlePieces3);
    }
  }
// ***** VDMTOOLS END Name=testcheckMiddlePieces3


// ***** VDMTOOLS START Name=testcheckMiddlePieces4 KEEP=NO
  public void testcheckMiddlePieces4 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testcheckMiddlePieces4);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(1), new Integer(0));
      Game.Position pos3 = new Game.Position(new Integer(2), new Integer(0));
      Game.Position pos4 = new Game.Position(new Integer(3), new Integer(0));
      game.addNewPiece(pos1, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.addNewPiece(pos3, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.addNewPiece(pos4, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      assertTrue(game.checkMiddlePieces(pos1, pos4));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testcheckMiddlePieces4);
    }
  }
// ***** VDMTOOLS END Name=testcheckMiddlePieces4


// ***** VDMTOOLS START Name=testcheckMiddlePieces5 KEEP=NO
  public void testcheckMiddlePieces5 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testcheckMiddlePieces5);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(3), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(2), new Integer(0));
      Game.Position pos3 = new Game.Position(new Integer(1), new Integer(0));
      Game.Position pos4 = new Game.Position(new Integer(0), new Integer(0));
      game.addNewPiece(pos1, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.addNewPiece(pos3, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.addNewPiece(pos4, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      assertTrue(game.checkMiddlePieces(pos1, pos4));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testcheckMiddlePieces5);
    }
  }
// ***** VDMTOOLS END Name=testcheckMiddlePieces5


// ***** VDMTOOLS START Name=testcheckMiddlePieces6 KEEP=NO
  public void testcheckMiddlePieces6 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testcheckMiddlePieces6);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(3));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(2));
      Game.Position pos3 = new Game.Position(new Integer(0), new Integer(1));
      Game.Position pos4 = new Game.Position(new Integer(0), new Integer(0));
      game.addNewPiece(pos1, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.addNewPiece(pos3, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.addNewPiece(pos4, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      assertTrue(game.checkMiddlePieces(pos1, pos4));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testcheckMiddlePieces6);
    }
  }
// ***** VDMTOOLS END Name=testcheckMiddlePieces6


// ***** VDMTOOLS START Name=testcheckMovement1 KEEP=NO
  public void testcheckMovement1 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testcheckMovement1);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      Game.Position pos3 = new Game.Position(new Integer(0), new Integer(2));
      game.addNewPiece(pos1, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.addNewPiece(pos3, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      assertTrue(Boolean.valueOf(UTIL.equals(game.checkMovement(pos1, pos3), Boolean.FALSE)));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testcheckMovement1);
    }
  }
// ***** VDMTOOLS END Name=testcheckMovement1


// ***** VDMTOOLS START Name=testcheckMovement2 KEEP=NO
  public void testcheckMovement2 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testcheckMovement2);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(2));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      Game.Position pos3 = new Game.Position(new Integer(0), new Integer(0));
      game.addNewPiece(pos1, new Piece(new Rank(new String("spy")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.addNewPiece(pos3, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      assertTrue(game.checkMovement(pos1, pos3));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testcheckMovement2);
    }
  }
// ***** VDMTOOLS END Name=testcheckMovement2


// ***** VDMTOOLS START Name=testcheckMovement3 KEEP=NO
  public void testcheckMovement3 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testcheckMovement3);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(2), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(1), new Integer(0));
      Game.Position pos3 = new Game.Position(new Integer(0), new Integer(0));
      game.addNewPiece(pos1, new Piece(new Rank(new String("spy")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.addNewPiece(pos3, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      assertTrue(game.checkMovement(pos1, pos3));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testcheckMovement3);
    }
  }
// ***** VDMTOOLS END Name=testcheckMovement3


// ***** VDMTOOLS START Name=testcheckMovement4 KEEP=NO
  public void testcheckMovement4 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testcheckMovement4);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(1), new Integer(0));
      Game.Position pos3 = new Game.Position(new Integer(2), new Integer(0));
      game.addNewPiece(pos1, new Piece(new Rank(new String("spy")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.addNewPiece(pos3, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      assertTrue(game.checkMovement(pos1, pos3));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testcheckMovement4);
    }
  }
// ***** VDMTOOLS END Name=testcheckMovement4


// ***** VDMTOOLS START Name=testvalidMove1 KEEP=NO
  public void testvalidMove1 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testvalidMove1);
    try {
      Game game = new Game();
      Game.Position pos = new Game.Position(new Integer(0), new Integer(0));
      game.addNewPiece(pos, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      assertTrue(Boolean.valueOf(UTIL.equals(game.validMove(new Integer(0), new Integer(0), new Integer(0), new Integer(0)), Boolean.FALSE)));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testvalidMove1);
    }
  }
// ***** VDMTOOLS END Name=testvalidMove1


// ***** VDMTOOLS START Name=testvalidMove2 KEEP=NO
  public void testvalidMove2 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testvalidMove2);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      game.addNewPiece(pos1, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      assertTrue(game.validMove(new Integer(0), new Integer(0), new Integer(0), new Integer(1)));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testvalidMove2);
    }
  }
// ***** VDMTOOLS END Name=testvalidMove2


// ***** VDMTOOLS START Name=testMove1 KEEP=NO
  public void testMove1 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testMove1);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      Game.Position pos3 = new Game.Position(new Integer(0), new Integer(2));
      game.addNewPiece(pos1, new Piece(new Rank(new String("spy")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.addNewPiece(pos3, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.move(new Integer(0), new Integer(0), new Integer(0), new Integer(2));
      Boolean tmpArg_v_34 = null;
      if ((tmpArg_v_34 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos3).rank).name), new String("spy")))).booleanValue()) 
        tmpArg_v_34 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos1).rank).name), new String("null")));
      assertTrue(tmpArg_v_34);
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testMove1);
    }
  }
// ***** VDMTOOLS END Name=testMove1


// ***** VDMTOOLS START Name=testMove2 KEEP=NO
  public void testMove2 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testMove2);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      Game.Position pos3 = new Game.Position(new Integer(0), new Integer(2));
      game.addNewPiece(pos1, new Piece(new Rank(new String("spy")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.addNewPiece(pos3, new Piece(new Rank(new String("ten")), new Color(new String("blue"))));
      game.move(new Integer(0), new Integer(0), new Integer(0), new Integer(2));
      Boolean tmpArg_v_34 = null;
      if ((tmpArg_v_34 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos3).rank).name), new String("spy")))).booleanValue()) 
        tmpArg_v_34 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos1).rank).name), new String("null")));
      assertTrue(tmpArg_v_34);
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testMove2);
    }
  }
// ***** VDMTOOLS END Name=testMove2


// ***** VDMTOOLS START Name=testMove3 KEEP=NO
  public void testMove3 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testMove3);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      game.addNewPiece(pos1, new Piece(new Rank(new String("three")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("bomb")), new Color(new String("blue"))));
      game.move(new Integer(0), new Integer(0), new Integer(0), new Integer(1));
      Boolean tmpArg_v_25 = null;
      if ((tmpArg_v_25 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos2).rank).name), new String("three")))).booleanValue()) 
        tmpArg_v_25 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos1).rank).name), new String("null")));
      assertTrue(tmpArg_v_25);
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testMove3);
    }
  }
// ***** VDMTOOLS END Name=testMove3


// ***** VDMTOOLS START Name=testMove4 KEEP=NO
  public void testMove4 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testMove4);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      game.addNewPiece(pos1, new Piece(new Rank(new String("two")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("bomb")), new Color(new String("blue"))));
      game.move(new Integer(0), new Integer(0), new Integer(0), new Integer(1));
      Boolean tmpArg_v_25 = null;
      if ((tmpArg_v_25 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos2).rank).name), new String("null")))).booleanValue()) 
        tmpArg_v_25 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos1).rank).name), new String("null")));
      assertTrue(tmpArg_v_25);
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testMove4);
    }
  }
// ***** VDMTOOLS END Name=testMove4


// ***** VDMTOOLS START Name=testMove5 KEEP=NO
  public void testMove5 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testMove5);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      game.addNewPiece(pos1, new Piece(new Rank(new String("four")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("five")), new Color(new String("blue"))));
      game.move(new Integer(0), new Integer(0), new Integer(0), new Integer(1));
      Boolean tmpArg_v_25 = null;
      if ((tmpArg_v_25 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos2).rank).name), new String("five")))).booleanValue()) 
        tmpArg_v_25 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos1).rank).name), new String("null")));
      assertTrue(tmpArg_v_25);
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testMove5);
    }
  }
// ***** VDMTOOLS END Name=testMove5


// ***** VDMTOOLS START Name=testMove6 KEEP=NO
  public void testMove6 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testMove6);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      game.addNewPiece(pos1, new Piece(new Rank(new String("seven")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("six")), new Color(new String("blue"))));
      game.move(new Integer(0), new Integer(0), new Integer(0), new Integer(1));
      Boolean tmpArg_v_25 = null;
      if ((tmpArg_v_25 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos2).rank).name), new String("seven")))).booleanValue()) 
        tmpArg_v_25 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos1).rank).name), new String("null")));
      assertTrue(tmpArg_v_25);
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testMove6);
    }
  }
// ***** VDMTOOLS END Name=testMove6


// ***** VDMTOOLS START Name=testMove7 KEEP=NO
  public void testMove7 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testMove7);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(1));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(0));
      game.addNewPiece(pos1, new Piece(new Rank(new String("eight")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.move(new Integer(0), new Integer(1), new Integer(0), new Integer(0));
      Boolean tmpArg_v_25 = null;
      if ((tmpArg_v_25 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos2).rank).name), new String("eight")))).booleanValue()) 
        tmpArg_v_25 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos1).rank).name), new String("null")));
      assertTrue(tmpArg_v_25);
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testMove7);
    }
  }
// ***** VDMTOOLS END Name=testMove7


// ***** VDMTOOLS START Name=testMove8 KEEP=NO
  public void testMove8 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testMove8);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(1), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(0));
      game.addNewPiece(pos1, new Piece(new Rank(new String("nine")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.move(new Integer(1), new Integer(0), new Integer(0), new Integer(0));
      Boolean tmpArg_v_25 = null;
      if ((tmpArg_v_25 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos2).rank).name), new String("nine")))).booleanValue()) 
        tmpArg_v_25 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos1).rank).name), new String("null")));
      assertTrue(tmpArg_v_25);
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testMove8);
    }
  }
// ***** VDMTOOLS END Name=testMove8


// ***** VDMTOOLS START Name=testMove9 KEEP=NO
  public void testMove9 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testMove9);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(1), new Integer(0));
      game.addNewPiece(pos1, new Piece(new Rank(new String("ten")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      game.move(new Integer(0), new Integer(0), new Integer(1), new Integer(0));
      Boolean tmpArg_v_25 = null;
      if ((tmpArg_v_25 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos2).rank).name), new String("ten")))).booleanValue()) 
        tmpArg_v_25 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos1).rank).name), new String("null")));
      assertTrue(tmpArg_v_25);
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testMove9);
    }
  }
// ***** VDMTOOLS END Name=testMove9


// ***** VDMTOOLS START Name=testMove10 KEEP=NO
  public void testMove10 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testMove10);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(1), new Integer(1));
      game.addNewPiece(pos1, new Piece(new Rank(new String("ten")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      assertTrue(Boolean.valueOf(UTIL.equals(game.checkHorV(pos1, pos2), Boolean.FALSE)));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testMove10);
    }
  }
// ***** VDMTOOLS END Name=testMove10


// ***** VDMTOOLS START Name=testMove11 KEEP=NO
  public void testMove11 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testMove11);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      game.addNewPiece(pos1, new Piece(new Rank(new String("ten")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      assertTrue(game.checkHorV(pos1, pos2));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testMove11);
    }
  }
// ***** VDMTOOLS END Name=testMove11


// ***** VDMTOOLS START Name=testMove12 KEEP=NO
  public void testMove12 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testMove12);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(1), new Integer(0));
      game.addNewPiece(pos1, new Piece(new Rank(new String("ten")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      assertTrue(game.checkHorV(pos1, pos2));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testMove12);
    }
  }
// ***** VDMTOOLS END Name=testMove12


// ***** VDMTOOLS START Name=testturnChanged KEEP=NO
  public void testturnChanged () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testturnChanged);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      game.turn = UTIL.ConvertToString(new String("red"));
      game.addNewPiece(pos1, new Piece(new Rank(new String("three")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("two")), new Color(new String("blue"))));
      game.move(new Integer(0), new Integer(0), new Integer(0), new Integer(1));
      assertTrue(Boolean.valueOf(UTIL.equals((game.turn), new String("blue"))));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testturnChanged);
    }
  }
// ***** VDMTOOLS END Name=testturnChanged


// ***** VDMTOOLS START Name=testgameEnded KEEP=NO
  public void testgameEnded () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testgameEnded);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      game.addNewPiece(pos1, new Piece(new Rank(new String("two")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("flag")), new Color(new String("blue"))));
      game.move(new Integer(0), new Integer(0), new Integer(0), new Integer(1));
      assertTrue(game.gameEnded());
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testgameEnded);
    }
  }
// ***** VDMTOOLS END Name=testgameEnded


// ***** VDMTOOLS START Name=testgetWinner1 KEEP=NO
  public void testgetWinner1 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testgetWinner1);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      game.addNewPiece(pos1, new Piece(new Rank(new String("two")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("flag")), new Color(new String("blue"))));
      game.move(new Integer(0), new Integer(0), new Integer(0), new Integer(1));
      assertTrue(Boolean.valueOf(UTIL.equals(game.getWinner(), new String("red"))));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testgetWinner1);
    }
  }
// ***** VDMTOOLS END Name=testgetWinner1


// ***** VDMTOOLS START Name=testgetWinner2 KEEP=NO
  public void testgetWinner2 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testgetWinner2);
    try {
      Game game = new Game();
      assertTrue(Boolean.valueOf(UTIL.equals(game.getWinner(), new String("null"))));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testgetWinner2);
    }
  }
// ***** VDMTOOLS END Name=testgetWinner2


// ***** VDMTOOLS START Name=testvalidSwapPositions1 KEEP=NO
  public void testvalidSwapPositions1 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testvalidSwapPositions1);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      game.addNewPiece(pos1, new Piece(new Rank(new String("two")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("flag")), new Color(new String("red"))));
      assertTrue(game.validSwapPositions(new Integer(0), new Integer(0), new Integer(0), new Integer(1)));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testvalidSwapPositions1);
    }
  }
// ***** VDMTOOLS END Name=testvalidSwapPositions1


// ***** VDMTOOLS START Name=testvalidSwapPositions2 KEEP=NO
  public void testvalidSwapPositions2 () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testvalidSwapPositions2);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      game.addNewPiece(pos1, new Piece(new Rank(new String("two")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("null")), new Color(new String("null"))));
      assertTrue(Boolean.valueOf(UTIL.equals(game.validSwapPositions(new Integer(0), new Integer(0), new Integer(0), new Integer(1)), Boolean.FALSE)));
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testvalidSwapPositions2);
    }
  }
// ***** VDMTOOLS END Name=testvalidSwapPositions2


// ***** VDMTOOLS START Name=testswapPositions KEEP=NO
  public void testswapPositions () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testswapPositions);
    try {
      Game game = new Game();
      Game.Position pos1 = new Game.Position(new Integer(0), new Integer(0));
      Game.Position pos2 = new Game.Position(new Integer(0), new Integer(1));
      game.addNewPiece(pos1, new Piece(new Rank(new String("two")), new Color(new String("red"))));
      game.addNewPiece(pos2, new Piece(new Rank(new String("flag")), new Color(new String("red"))));
      game.swapPositions(new Integer(0), new Integer(0), new Integer(0), new Integer(1));
      Boolean tmpArg_v_25 = null;
      if ((tmpArg_v_25 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos2).rank).name), new String("two")))).booleanValue()) 
        tmpArg_v_25 = Boolean.valueOf(UTIL.equals(((game.getPiece(pos1).rank).name), new String("flag")));
      assertTrue(tmpArg_v_25);
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testswapPositions);
    }
  }
// ***** VDMTOOLS END Name=testswapPositions


// ***** VDMTOOLS START Name=testAll KEEP=NO
  public void testAll () throws CGException {
    sentinel.entering(((TestsSentinel)sentinel).testAll);
    try {
      testgetBoardSize();
      testcheckAvaiability1();
      testcheckAvaiability2();
      testaddNewPiece();
      testgetPiece();
      testgetClonePiece();
      testemptyPiece();
      testcheckTurn();
      testchangeTurn();
      testgetOpponentColor1();
      testgetOpponentColor2();
      testcheckToPositionColor1();
      testcheckToPositionColor2();
      testcheckMiddlePieces1();
      testcheckMiddlePieces2();
      testcheckMiddlePieces3();
      testcheckMiddlePieces4();
      testcheckMiddlePieces5();
      testcheckMiddlePieces6();
      testcheckMovement1();
      testcheckMovement2();
      testcheckMovement3();
      testcheckMovement4();
      testvalidMove1();
      testvalidMove2();
      testMove1();
      testMove2();
      testMove3();
      testMove4();
      testMove5();
      testMove6();
      testMove7();
      testMove8();
      testMove9();
      testMove10();
      testMove11();
      testMove12();
      testgameEnded();
      testturnChanged();
      testgetWinner1();
      testgetWinner2();
      testvalidSwapPositions1();
      testvalidSwapPositions2();
      testswapPositions();
    }
    finally {
      sentinel.leaving(((TestsSentinel)sentinel).testAll);
    }
  }
// ***** VDMTOOLS END Name=testAll

}
;
