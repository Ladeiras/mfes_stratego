class Tests is subclass of TestCase
	operations
		static public assertTrue : bool ==> ()
                assertTrue(op) == return
        pre op;
		
		public testgetBoardSize : () ==> ()
			testgetBoardSize() ==
			(
				dcl game : Game := new Game();
				
				assertTrue(game.getBoardSize() = 100);
				IO`println("getBoardSize : passed");
			);
			
		--Test if a new position for flag is available
		public testcheckAvaiability1 : () ==> ()
			testcheckAvaiability1() ==
			(
				dcl game : Game := new Game();
				
				game.addNewPiece(mk_Game`Position(0,0), new Piece(new Rank("eight"), new Color("red")));
				game.addNewPiece(mk_Game`Position(0,1), new Piece(new Rank("eight"), new Color("red")));
				assertTrue(game.checkAvaiability(new Piece(new Rank("eight"), new Color("red"))) = false);
				IO`println("checkAvaiability1 : passed");
			);
		
		--Test if a new position for 'eight' is available
		public testcheckAvaiability2 : () ==> ()
			testcheckAvaiability2() ==
			(
				dcl game : Game := new Game();
				
				game.addNewPiece(mk_Game`Position(0,0), new Piece(new Rank("eight"), new Color("red")));
				assertTrue(game.checkAvaiability(new Piece(new Rank("eight"), new Color("red"))));
				IO`println("checkAvaiability2 : passed");
			);

		--Test if the new piece was added
		public testaddNewPiece : () ==> ()
			testaddNewPiece() ==
			(
				dcl game : Game := new Game();
				dcl pos : Game`Position := mk_Game`Position(0,0);
				
				game.addNewPiece(pos, new Piece(new Rank("eight"), new Color("red")));
				assertTrue(game.board(pos).rank.name = "eight" and game.board(pos).color.name = "red");
				IO`println("addNewPiece : passed");
			);
		
		--Test if the returned piece is the correct one	
		public testgetPiece : () ==> ()
			testgetPiece() ==
			(
				dcl game : Game := new Game();
				dcl pos : Game`Position := mk_Game`Position(0,0);
				
				game.addNewPiece(pos, new Piece(new Rank("eight"), new Color("red")));
				assertTrue(game.getPiece(pos).rank.name = "eight" and game.getPiece(pos).color.name = "red");
				IO`println("getPiece : passed");
			);
		
		--Test if the clone of the piece is the correct one
		public testgetClonePiece : () ==> ()
			testgetClonePiece() ==
			(
				dcl game : Game := new Game();
				dcl pos : Game`Position := mk_Game`Position(0,0);
				dcl clone : Piece;
				
				game.addNewPiece(pos, new Piece(new Rank("eight"), new Color("red")));
				clone := game.getClonePiece(pos);
				
				assertTrue(clone.rank.name = "eight" and clone.color.name = "red");
				IO`println("getClonePiece : passed");
			);
		
		--Test if the empty piece is in fact empy
		public testemptyPiece : () ==> ()
			testemptyPiece() ==
			(
				dcl game : Game := new Game();
				dcl pos : Game`Position := mk_Game`Position(0,0);
				
				game.addNewPiece(pos, game.emptyPiece());
				
				assertTrue(game.getPiece(pos).rank.name = "null" and game.getPiece(pos).color.name = "null");
				IO`println("emptyPiece : passed");
			);
		
		--Test if the piece to be moved belongs to the turn player
		public testcheckTurn : () ==> ()
			testcheckTurn() ==
			(
				dcl game : Game := new Game();
				dcl pos : Game`Position := mk_Game`Position(0,0);
				
				game.addNewPiece(pos, new Piece(new Rank("eight"), new Color("red")));
				game.turn := "blue";
				
				assertTrue(game.checkTurn(pos) = false);
				IO`println("checkTurn : passed");
			);
		
		--Test if the turn is changed
		public testchangeTurn : () ==> ()
			testchangeTurn() ==
			(
				dcl game : Game := new Game();
				
				game.turn := "blue";
				game.changeTurn();
				
				assertTrue(game.turn = "red");
				IO`println("changeTurn : passed");
			);
		
		--Test if the piece to be moved to, belongs to the opponent player
		public testgetOpponentColor : () ==> ()
			testgetOpponentColor() ==
			(
				dcl game : Game := new Game();
				dcl pos : Game`Position := mk_Game`Position(0,0);
				
				game.addNewPiece(pos, new Piece(new Rank("eight"), new Color("red")));
				
				assertTrue(game.getOpponentColor(pos) = "blue");
				IO`println("getOpponentColor : passed");
			);
		
		--Test if the piece to be moved to is no other than the opponent's or empty
		public testcheckToPositionColor : () ==> ()
			testcheckToPositionColor() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,0);
				dcl pos2 : Game`Position := mk_Game`Position(0,1);
				
				game.addNewPiece(pos1, new Piece(new Rank("eight"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("eight"), new Color("blue")));
				
				assertTrue(game.checkToPositionColor(pos1,pos2));
				IO`println("checkToPositionColor : passed");
			);
		
		--Test if the pieces in the middle ar empty (all empty)
		public testcheckMiddlePieces1 : () ==> ()
			testcheckMiddlePieces1() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,0);
				dcl pos2 : Game`Position := mk_Game`Position(0,1);
				dcl pos3 : Game`Position := mk_Game`Position(0,2);
				dcl pos4 : Game`Position := mk_Game`Position(0,3);
				
				game.addNewPiece(pos1, new Piece(new Rank("eight"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("null"), new Color("null")));
				game.addNewPiece(pos3, new Piece(new Rank("null"), new Color("null")));
				game.addNewPiece(pos4, new Piece(new Rank("eight"), new Color("blue")));
				
				assertTrue(game.checkMiddlePieces(pos1,pos4));
				IO`println("checkMiddlePieces1 : passed");
			);
		
		--Test if the pieces in the middle ar empty (one water)
		public testcheckMiddlePieces2 : () ==> ()
			testcheckMiddlePieces2() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,0);
				dcl pos2 : Game`Position := mk_Game`Position(0,1);
				dcl pos3 : Game`Position := mk_Game`Position(0,2);
				dcl pos4 : Game`Position := mk_Game`Position(0,3);
				
				game.addNewPiece(pos1, new Piece(new Rank("eight"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("water"), new Color("null")));
				game.addNewPiece(pos3, new Piece(new Rank("null"), new Color("null")));
				game.addNewPiece(pos4, new Piece(new Rank("eight"), new Color("blue")));
				
				assertTrue(game.checkMiddlePieces(pos1,pos4));
				IO`println("checkMiddlePieces2 : passed");
			);
		
		--Test if the pieces in the middle ar empty (one piece)
		public testcheckMiddlePieces3 : () ==> ()
			testcheckMiddlePieces3() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,0);
				dcl pos2 : Game`Position := mk_Game`Position(0,1);
				dcl pos3 : Game`Position := mk_Game`Position(0,2);
				dcl pos4 : Game`Position := mk_Game`Position(0,3);
				
				game.addNewPiece(pos1, new Piece(new Rank("eight"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("null"), new Color("null")));
				game.addNewPiece(pos3, new Piece(new Rank("eight"), new Color("blue")));
				game.addNewPiece(pos4, new Piece(new Rank("null"), new Color("null")));
				
				assertTrue(game.checkMiddlePieces(pos1,pos4) = false);
				IO`println("checkMiddlePieces3 : passed");
			);
		
		--Test if the number of steps in a move is less or equal to the piece steps (2 steps in 1 step piece)
		public testcheckMovement1 : () ==> ()
			testcheckMovement1() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,0);
				dcl pos2 : Game`Position := mk_Game`Position(0,1);
				dcl pos3 : Game`Position := mk_Game`Position(0,2);
				
				game.addNewPiece(pos1, new Piece(new Rank("eight"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("null"), new Color("null")));
				game.addNewPiece(pos3, new Piece(new Rank("null"), new Color("null")));
				
				assertTrue(game.checkMovement(pos1,pos3) = false);
				IO`println("checkMovement1 : passed");
			);
		
		
		--Test if the number of steps in a move is less or equal to the piece steps (2 steps in 8 step piece)
		public testcheckMovement2 : () ==> ()
			testcheckMovement2() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,0);
				dcl pos2 : Game`Position := mk_Game`Position(0,1);
				dcl pos3 : Game`Position := mk_Game`Position(0,2);
				
				game.addNewPiece(pos1, new Piece(new Rank("spy"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("null"), new Color("null")));
				game.addNewPiece(pos3, new Piece(new Rank("null"), new Color("null")));
				
				assertTrue(game.checkMovement(pos1,pos3));
				IO`println("checkMovement2 : passed");
			);
		
		--Test if the movement to be made is valid (same piece)
		public testvalidMove1 : () ==> ()
			testvalidMove1() ==
			(
				dcl game : Game := new Game();
				dcl pos : Game`Position := mk_Game`Position(0,0);
				
				game.addNewPiece(pos, new Piece(new Rank("eight"), new Color("red")));
				
				assertTrue(game.validMove(0,0,0,0) = false);
				IO`println("validMove1 : passed");
			);
		
		--Test if the movement to be made is valid (empty cell)
		public testvalidMove2 : () ==> ()
			testvalidMove2() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,0);
				dcl pos2 : Game`Position := mk_Game`Position(0,1);
				
				game.addNewPiece(pos1, new Piece(new Rank("eight"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("null"), new Color("null")));
				
				assertTrue(game.validMove(0,0,0,1));
				IO`println("validMove2 : passed");
			);
		
		--Test if the movement made was valid (spy, 2 steps to an empty cell)
		public testMove1 : () ==> ()
			testMove1() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,0);
				dcl pos2 : Game`Position := mk_Game`Position(0,1);
				dcl pos3 : Game`Position := mk_Game`Position(0,2);
				
				game.addNewPiece(pos1, new Piece(new Rank("spy"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("null"), new Color("null")));
				game.addNewPiece(pos3, new Piece(new Rank("null"), new Color("null")));
				game.move(0,0,0,2);
				
				assertTrue(game.getPiece(pos3).rank.name = "spy" and game.getPiece(pos1).rank.name = "null");
				IO`println("Move1 : passed");
			);
		
		--Test if the movement made was valid (spy, 2 steps to a major cell)
		public testMove2 : () ==> ()
			testMove2() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,0);
				dcl pos2 : Game`Position := mk_Game`Position(0,1);
				dcl pos3 : Game`Position := mk_Game`Position(0,2);
				
				game.addNewPiece(pos1, new Piece(new Rank("spy"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("null"), new Color("null")));
				game.addNewPiece(pos3, new Piece(new Rank("ten"), new Color("blue")));
				game.move(0,0,0,2);
				
				assertTrue(game.getPiece(pos3).rank.name = "spy" and game.getPiece(pos1).rank.name = "null");
				IO`println("Move2 : passed");
			);
		
		--Test if the movement made was valid (three, 1 step to a bomb)
		public testMove3 : () ==> ()
			testMove3() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,0);
				dcl pos2 : Game`Position := mk_Game`Position(0,1);
				
				game.addNewPiece(pos1, new Piece(new Rank("three"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("bomb"), new Color("blue")));
				game.move(0,0,0,1);
				
				assertTrue(game.getPiece(pos2).rank.name = "three" and game.getPiece(pos1).rank.name = "null");
				IO`println("Move3 : passed");
			);
		
		--Test if the movement made was valid (two, 1 step to a bomb)
		public testMove4 : () ==> ()
			testMove4() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,0);
				dcl pos2 : Game`Position := mk_Game`Position(0,1);
				
				game.addNewPiece(pos1, new Piece(new Rank("two"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("bomb"), new Color("blue")));
				game.move(0,0,0,1);
				
				assertTrue(game.getPiece(pos2).rank.name = "null" and game.getPiece(pos1).rank.name = "null");
				IO`println("Move4 : passed");
			);
		
		--Test if the movement made was valid (two, 1 steps to higher opponent)
		public testMove5 : () ==> ()
			testMove5() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,0);
				dcl pos2 : Game`Position := mk_Game`Position(0,1);
				
				game.addNewPiece(pos1, new Piece(new Rank("two"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("three"), new Color("blue")));
				game.move(0,0,0,1);
				
				assertTrue(game.getPiece(pos2).rank.name = "three" and game.getPiece(pos1).rank.name = "null");
				IO`println("Move5 : passed");
			);
		
		--Test if the movement made was valid (three, 1 steps to lower opponent)
		public testMove6 : () ==> ()
			testMove6() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,0);
				dcl pos2 : Game`Position := mk_Game`Position(0,1);
				
				game.addNewPiece(pos1, new Piece(new Rank("three"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("two"), new Color("blue")));
				game.move(0,0,0,1);
				
				assertTrue(game.getPiece(pos2).rank.name = "three" and game.getPiece(pos1).rank.name = "null");
				IO`println("Move6 : passed");
			);
		
		--Test if the movement made was valid (up)	
		public testMove7 : () ==> ()
			testMove7() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,1);
				dcl pos2 : Game`Position := mk_Game`Position(0,0);
				
				game.addNewPiece(pos1, new Piece(new Rank("eight"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("null"), new Color("null")));
				game.move(0,1,0,0);
				
				assertTrue(game.getPiece(pos2).rank.name = "eight" and game.getPiece(pos1).rank.name = "null");
				IO`println("Move7 : passed");
			);
			
		--Test if the movement made was valid (left)	
		public testMove8 : () ==> ()
			testMove8() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(1,0);
				dcl pos2 : Game`Position := mk_Game`Position(0,0);
				
				game.addNewPiece(pos1, new Piece(new Rank("eight"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("null"), new Color("null")));
				game.move(1,0,0,0);
				
				assertTrue(game.getPiece(pos2).rank.name = "eight" and game.getPiece(pos1).rank.name = "null");
				IO`println("Move8 : passed");
			);
			
		--Test if the movement made was valid (right)	
		public testMove9 : () ==> ()
			testMove9() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,0);
				dcl pos2 : Game`Position := mk_Game`Position(1,0);
				
				game.addNewPiece(pos1, new Piece(new Rank("eight"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("null"), new Color("null")));
				game.move(0,0,1,0);
				
				assertTrue(game.getPiece(pos2).rank.name = "eight" and game.getPiece(pos1).rank.name = "null");
				IO`println("Move9 : passed");
			);
		
		--Test if after a 'move' the turn changes
		public testturnChanged : () ==> ()
			testturnChanged() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,0);
				dcl pos2 : Game`Position := mk_Game`Position(0,1);
				
				game.turn := "red";
				game.addNewPiece(pos1, new Piece(new Rank("three"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("two"), new Color("blue")));
				game.move(0,0,0,1);
				
				assertTrue(game.turn = "blue");
				IO`println("testturnChanged : passed");
			);
		
		--Test if after a flag capture the game ends
		public testgameEnded : () ==> ()
			testgameEnded() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,0);
				dcl pos2 : Game`Position := mk_Game`Position(0,1);
				
				game.addNewPiece(pos1, new Piece(new Rank("two"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("flag"), new Color("blue")));
				game.move(0,0,0,1);
				
				assertTrue(game.gameEnded());
				IO`println("gameEnded : passed");
			);
		
		--Test if the winner is correct
		public testgetWinner : () ==> ()
			testgetWinner() ==
			(
				dcl game : Game := new Game();
				dcl pos1 : Game`Position := mk_Game`Position(0,0);
				dcl pos2 : Game`Position := mk_Game`Position(0,1);
				
				game.addNewPiece(pos1, new Piece(new Rank("two"), new Color("red")));
				game.addNewPiece(pos2, new Piece(new Rank("flag"), new Color("blue")));
				game.move(0,0,0,1);
				
				assertTrue(game.getWinner() = "red");
				IO`println("getWinner : passed");
			);
			
		public testAll : () ==> ()
			testAll() ==
			(
				testgetBoardSize();
				testcheckAvaiability1();
				testcheckAvaiability2();
				testaddNewPiece();
				testgetPiece();
				testgetClonePiece();
				testemptyPiece();
				testcheckTurn();
				testchangeTurn();
				testgetOpponentColor();
				testcheckToPositionColor();
				testcheckMiddlePieces1();
				testcheckMiddlePieces2();
				testcheckMiddlePieces3();
				testcheckMovement1();
				testcheckMovement2();
				testvalidMove1();
				testvalidMove2();
				testMove1();
				testMove2();
				testMove3();
				testMove4();
				testMove5();
				testMove6();
				testMove7();
				testMove8();
				testMove9();
				testgameEnded();
				testturnChanged();
				testgetWinner();
			);
end Tests