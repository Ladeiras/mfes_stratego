//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2013-12-05 by the VDM++ to JAVA Code Generator
// (v9.0.2 - Thu 14-Mar-2013 12:36:47 +0900)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "C:\\Users\\João\\Documents\\GitHub\\mfes_stratego\\VDM++\\Game.rtf".

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.Token;
import jp.vdmtools.VDM.Record;
import jp.vdmtools.VDM.Sentinel;
import jp.vdmtools.VDM.EvaluatePP;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class Game implements EvaluatePP {


// ***** VDMTOOLS START Name=Position KEEP=NO
  public static class Position implements Record {

    public Number column;

    public Number row;


    public Position () {}


    public Position (Number p1, Number p2) {
      column = p1;
      row = p2;
    }


    public Object clone () {
      return new Position(column, row);
    }


    public String toString () {
      return "mk_Game`Position(" + UTIL.toString(column) + ", " + UTIL.toString(row) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof Position)) 
        return false;
      else {
        Position temp = (Position)obj;
        return UTIL.equals(column, temp.column) && UTIL.equals(row, temp.row);
      }
    }


    public int hashCode () {
      return (column == null ? 0 : column.hashCode()) + (row == null ? 0 : row.hashCode());
    }

  }
// ***** VDMTOOLS END Name=Position
;

// ***** VDMTOOLS START Name=turn KEEP=NO
  public volatile String turn = null;
// ***** VDMTOOLS END Name=turn

// ***** VDMTOOLS START Name=finish KEEP=NO
  public volatile Boolean finish = null;
// ***** VDMTOOLS END Name=finish

// ***** VDMTOOLS START Name=board KEEP=NO
  public volatile Map board = new HashMap();
// ***** VDMTOOLS END Name=board

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=GameSentinel KEEP=NO
  class GameSentinel extends Sentinel {

    public final int Game = 0;

    public final int move = 1;

    public final int addPiece = 2;

    public final int getPiece = 3;

    public final int checkHorV = 4;

    public final int checkTurn = 5;

    public final int gameEnded = 6;

    public final int getWinner = 7;

    public final int validMove = 8;

    public final int changeTurn = 9;

    public final int emptyPiece = 10;

    public final int initialize = 11;

    public final int addNewPiece = 12;

    public final int getBoardSize = 13;

    public final int checkMovement = 14;

    public final int getClonePiece = 15;

    public final int swapPositions = 16;

    public final int checkAvaiability = 17;

    public final int getOpponentColor = 18;

    public final int checkMiddlePieces = 19;

    public final int validSwapPositions = 20;

    public final int checkToPositionColor = 21;

    public final int nr_functions = 22;


    public GameSentinel () throws CGException {}


    public GameSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=GameSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return Boolean.TRUE;
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new GameSentinel(this);
    }
    catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel


// ***** VDMTOOLS START Name=vdm_init_Game KEEP=NO
  private void vdm_init_Game () {
    try {
      setSentinel();
      board = new HashMap();
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Game


// ***** VDMTOOLS START Name=inv_Game KEEP=NO
  public Boolean inv_Game () {
    Boolean rexpr_2 = null;
    if ((rexpr_2 = Boolean.valueOf(new HashSet(board.keySet()).size() <= 100)).booleanValue()) {
      Boolean var2_8 = null;
      boolean tmpQuant_10 = true;
      {
        Set e1_set_13 = new HashSet(board.keySet());
        Position p = null;
        Set tmpSet_26 = new HashSet(e1_set_13);
        for (Iterator enm_25 = tmpSet_26.iterator(); enm_25.hasNext() && tmpQuant_10; ) {
          Position elem_24 = (Position)enm_25.next();
          /* p */
          p = elem_24;
          Boolean pred_14 = null;
          if ((pred_14 = Boolean.valueOf((p.column).intValue() <= 9)).booleanValue()) 
            pred_14 = Boolean.valueOf((p.row).intValue() <= 9);
          if (!pred_14.booleanValue()) 
            tmpQuant_10 = false;
        }
      }
      if ((var2_8 = Boolean.valueOf(tmpQuant_10)).booleanValue()) {
        Boolean var2_27 = null;
        if (!(var2_27 = Boolean.valueOf(UTIL.equals(turn, new String("red")))).booleanValue()) 
          var2_27 = Boolean.valueOf(UTIL.equals(turn, new String("blue")));
        var2_8 = var2_27;
      }
      rexpr_2 = var2_8;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=inv_Game


// ***** VDMTOOLS START Name=Game KEEP=NO
  public Game () throws CGException {
    try {
      vdm_init_Game();
      turn = new String("red");
      finish = Boolean.FALSE;
      initialize();
      setSentinel();
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Game


// ***** VDMTOOLS START Name=initialize KEEP=NO
  public void initialize () throws CGException {
    sentinel.entering(((GameSentinel)sentinel).initialize);
    try {
      Number c = new Integer(0);
      Number r = new Integer(0);
      while (r.intValue() < 10) {
        while (c.intValue() < 10) {
          addNewPiece(new Position(c, r), new Piece(new Rank(new String("null")), new Color(new String("null"))));
          c = new Integer(c.intValue() + 1);
          if (!this.inv_Game().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Game");
        }
        c = new Integer(0);
        if (!this.inv_Game().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Game");
        r = new Integer(r.intValue() + 1);
        if (!this.inv_Game().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Game");
      }
      addNewPiece(new Position(new Integer(2), new Integer(4)), new Piece(new Rank(new String("water")), new Color(new String("null"))));
      addNewPiece(new Position(new Integer(2), new Integer(5)), new Piece(new Rank(new String("water")), new Color(new String("null"))));
      addNewPiece(new Position(new Integer(3), new Integer(4)), new Piece(new Rank(new String("water")), new Color(new String("null"))));
      addNewPiece(new Position(new Integer(3), new Integer(5)), new Piece(new Rank(new String("water")), new Color(new String("null"))));
      addNewPiece(new Position(new Integer(6), new Integer(4)), new Piece(new Rank(new String("water")), new Color(new String("null"))));
      addNewPiece(new Position(new Integer(6), new Integer(5)), new Piece(new Rank(new String("water")), new Color(new String("null"))));
      addNewPiece(new Position(new Integer(7), new Integer(4)), new Piece(new Rank(new String("water")), new Color(new String("null"))));
      addNewPiece(new Position(new Integer(7), new Integer(5)), new Piece(new Rank(new String("water")), new Color(new String("null"))));
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).initialize);
    }
  }
// ***** VDMTOOLS END Name=initialize


// ***** VDMTOOLS START Name=getBoardSize KEEP=NO
  public Number getBoardSize () throws CGException {
    sentinel.entering(((GameSentinel)sentinel).getBoardSize);
    try {
      return new Integer(new HashSet(board.keySet()).size());
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).getBoardSize);
    }
  }
// ***** VDMTOOLS END Name=getBoardSize


// ***** VDMTOOLS START Name=checkAvaiability#1|Piece KEEP=NO
  public Boolean checkAvaiability (final Piece piece) throws CGException {
    sentinel.entering(((GameSentinel)sentinel).checkAvaiability);
    try {
      Set setP = new HashSet();
      Set res_s_2 = new HashSet();
      {
        Set e1_set_6 = new HashSet(board.values());
        Piece p = null;
        Set tmpSet_25 = new HashSet(e1_set_6);
        for (Iterator enm_24 = tmpSet_25.iterator(); enm_24.hasNext(); ) {
          Piece elem_23 = (Piece)enm_24.next();
          /* p */
          p = elem_23;
          Boolean pred_7 = null;
          if ((pred_7 = Boolean.valueOf(UTIL.equals(((p.color).name), ((piece.color).name)))).booleanValue()) 
            pred_7 = Boolean.valueOf(UTIL.equals(((p.rank).name), ((piece.rank).name)));
          if (pred_7.booleanValue()) {
            res_s_2.add(p);
          }
        }
      }
      setP = res_s_2;
      return Boolean.valueOf(setP.size() < ((piece.rank).avaiability).intValue());
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).checkAvaiability);
    }
  }
// ***** VDMTOOLS END Name=checkAvaiability#1|Piece


// ***** VDMTOOLS START Name=addNewPiece#2|Position|Piece KEEP=NO
  public void addNewPiece (final Position position, final Piece piece) throws CGException {
    sentinel.entering(((GameSentinel)sentinel).addNewPiece);
    try {
      if (checkAvaiability(piece).booleanValue()) {
        board.put(position, piece);
        if (!this.inv_Game().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Game");
      }
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).addNewPiece);
    }
  }
// ***** VDMTOOLS END Name=addNewPiece#2|Position|Piece


// ***** VDMTOOLS START Name=addPiece#2|Position|Piece KEEP=NO
  public void addPiece (final Position position, final Piece piece) throws CGException {
    sentinel.entering(((GameSentinel)sentinel).addPiece);
    try {
      board.put(position, piece);
      if (!this.inv_Game().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Game");
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).addPiece);
    }
  }
// ***** VDMTOOLS END Name=addPiece#2|Position|Piece


// ***** VDMTOOLS START Name=getPiece#1|Position KEEP=NO
  public Piece getPiece (final Position pos) throws CGException {
    sentinel.entering(((GameSentinel)sentinel).getPiece);
    try {
      return (Piece)board.get(pos);
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).getPiece);
    }
  }
// ***** VDMTOOLS END Name=getPiece#1|Position


// ***** VDMTOOLS START Name=getClonePiece#1|Position KEEP=NO
  public Piece getClonePiece (final Position pos) throws CGException {
    sentinel.entering(((GameSentinel)sentinel).getClonePiece);
    try {
      Rank arg_3 = null;
      String arg_5 = null;
      arg_5 = (((Piece)board.get(pos)).rank).name;
      arg_3 = new Rank(arg_5);
      Color arg_4 = null;
      String arg_10 = null;
      arg_10 = (((Piece)board.get(pos)).color).name;
      arg_4 = new Color(arg_10);
      return new Piece(arg_3, arg_4);
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).getClonePiece);
    }
  }
// ***** VDMTOOLS END Name=getClonePiece#1|Position


// ***** VDMTOOLS START Name=emptyPiece KEEP=NO
  public Piece emptyPiece () throws CGException {
    sentinel.entering(((GameSentinel)sentinel).emptyPiece);
    try {
      return new Piece(new Rank(new String("null")), new Color(new String("null")));
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).emptyPiece);
    }
  }
// ***** VDMTOOLS END Name=emptyPiece


// ***** VDMTOOLS START Name=checkTurn#1|Position KEEP=NO
  public Boolean checkTurn (final Position p) throws CGException {
    sentinel.entering(((GameSentinel)sentinel).checkTurn);
    try {
      if (UTIL.equals(((((Piece)board.get(p)).color).name), turn)) 
        return Boolean.TRUE;
      else 
        return Boolean.FALSE;
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).checkTurn);
    }
  }
// ***** VDMTOOLS END Name=checkTurn#1|Position


// ***** VDMTOOLS START Name=changeTurn KEEP=NO
  public void changeTurn () throws CGException {
    sentinel.entering(((GameSentinel)sentinel).changeTurn);
    try {
      if (UTIL.equals(turn, new String("red"))) {
        turn = new String("blue");
        if (!this.inv_Game().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Game");
      }
      else {
        turn = new String("red");
        if (!this.inv_Game().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Game");
      }
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).changeTurn);
    }
  }
// ***** VDMTOOLS END Name=changeTurn


// ***** VDMTOOLS START Name=getOpponentColor#1|Position KEEP=NO
  public String getOpponentColor (final Position p) throws CGException {
    sentinel.entering(((GameSentinel)sentinel).getOpponentColor);
    try {
      if (UTIL.equals(((((Piece)board.get(p)).color).name), new String("red"))) 
        return "blue";
      else 
        return "red";
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).getOpponentColor);
    }
  }
// ***** VDMTOOLS END Name=getOpponentColor#1|Position


// ***** VDMTOOLS START Name=checkToPositionColor#2|Position|Position KEEP=NO
  public Boolean checkToPositionColor (final Position p1, final Position p2) throws CGException {
    sentinel.entering(((GameSentinel)sentinel).checkToPositionColor);
    try {
      if (!this.pre_checkToPositionColor(p1, p2).booleanValue()) 
        UTIL.RunTime("Precondition failure in checkToPositionColor");
      Boolean cond_3 = null;
      if (!(cond_3 = Boolean.valueOf(UTIL.equals(((((Piece)board.get(p2)).color).name), getOpponentColor(p1)))).booleanValue()) 
        cond_3 = Boolean.valueOf(UTIL.equals(((((Piece)board.get(p2)).color).name), new String("null")));
      if (cond_3.booleanValue()) 
        return Boolean.TRUE;
      else 
        return Boolean.FALSE;
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).checkToPositionColor);
    }
  }
// ***** VDMTOOLS END Name=checkToPositionColor#2|Position|Position


// ***** VDMTOOLS START Name=pre_checkToPositionColor#2|Position|Position KEEP=NO
  public Boolean pre_checkToPositionColor (final Position p1, final Position p2) throws CGException {
    return checkTurn(p1);
  }
// ***** VDMTOOLS END Name=pre_checkToPositionColor#2|Position|Position


// ***** VDMTOOLS START Name=checkHorV#2|Position|Position KEEP=NO
  public Boolean checkHorV (final Position p1, final Position p2) throws CGException {
    sentinel.entering(((GameSentinel)sentinel).checkHorV);
    try {
      if (!this.pre_checkHorV(p1, p2).booleanValue()) 
        UTIL.RunTime("Precondition failure in checkHorV");
      {
        Set pSet = new HashSet();
        pSet.add(p1);
        pSet.add(p2);
        boolean tmpQuant_6 = true;
        {
          Position e1 = null;
          Position e2 = null;
          Set e_set_23 = pSet;
          Set tmpSet_26 = new HashSet(e_set_23);
          for (Iterator enm_25 = tmpSet_26.iterator(); enm_25.hasNext() && tmpQuant_6; ) {
            Position elem_24 = (Position)enm_25.next();
            /* e2 */
            e2 = elem_24;
            Set tmpSet_22 = new HashSet(pSet);
            for (Iterator enm_21 = tmpSet_22.iterator(); enm_21.hasNext() && tmpQuant_6; ) {
              Position elem_20 = (Position)enm_21.next();
              /* e1 */
              e1 = elem_20;
              Boolean pred_8 = null;
              if (!(pred_8 = Boolean.valueOf((e1.row).intValue() == (e2.row).intValue())).booleanValue()) 
                pred_8 = Boolean.valueOf((e1.column).intValue() == (e2.column).intValue());
              if (!pred_8.booleanValue()) 
                tmpQuant_6 = false;
            }
          }
        }
        return Boolean.valueOf(tmpQuant_6);
      }
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).checkHorV);
    }
  }
// ***** VDMTOOLS END Name=checkHorV#2|Position|Position


// ***** VDMTOOLS START Name=pre_checkHorV#2|Position|Position KEEP=NO
  public Boolean pre_checkHorV (final Position p1, final Position p2) throws CGException {
    return checkTurn(p1);
  }
// ***** VDMTOOLS END Name=pre_checkHorV#2|Position|Position


// ***** VDMTOOLS START Name=checkMiddlePieces#2|Position|Position KEEP=NO
  public Boolean checkMiddlePieces (final Position p_from, final Position p_to) throws CGException {
    sentinel.entering(((GameSentinel)sentinel).checkMiddlePieces);
    try {
      if (!this.pre_checkMiddlePieces(p_from, p_to).booleanValue()) 
        UTIL.RunTime("Precondition failure in checkMiddlePieces");
      {
        Set pSet = new HashSet();
        Boolean cond_3 = null;
        if ((cond_3 = Boolean.valueOf((p_to.column).intValue() > (p_from.column).intValue())).booleanValue()) 
          cond_3 = Boolean.valueOf((p_to.row).intValue() == (p_from.row).intValue());
        if (cond_3.booleanValue()) {
          Set res_s_129 = new HashSet();
          {
            Set e1_set_133 = new HashSet(board.keySet());
            Position p = null;
            Set tmpSet_154 = new HashSet(e1_set_133);
            for (Iterator enm_153 = tmpSet_154.iterator(); enm_153.hasNext(); ) {
              Position elem_152 = (Position)enm_153.next();
              /* p */
              p = elem_152;
              Boolean pred_134 = null;
              Boolean var1_135 = null;
              if ((var1_135 = Boolean.valueOf((p.column).intValue() < (p_to.column).intValue())).booleanValue()) 
                var1_135 = Boolean.valueOf((p.column).intValue() > (p_from.column).intValue());
              if ((pred_134 = var1_135).booleanValue()) 
                pred_134 = Boolean.valueOf((p.row).intValue() == (p_from.row).intValue());
              if (pred_134.booleanValue()) {
                res_s_129.add(p);
              }
            }
          }
          pSet = (Set)UTIL.clone(res_s_129);
          if (!this.inv_Game().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Game");
        }
        else {
          Boolean cond_90 = null;
          if ((cond_90 = Boolean.valueOf((p_to.column).intValue() < (p_from.column).intValue())).booleanValue()) 
            cond_90 = Boolean.valueOf((p_to.row).intValue() == (p_from.row).intValue());
          if (cond_90.booleanValue()) {
            Set res_s_102 = new HashSet();
            {
              Set e1_set_106 = new HashSet(board.keySet());
              Position p = null;
              Set tmpSet_127 = new HashSet(e1_set_106);
              for (Iterator enm_126 = tmpSet_127.iterator(); enm_126.hasNext(); ) {
                Position elem_125 = (Position)enm_126.next();
                /* p */
                p = elem_125;
                Boolean pred_107 = null;
                Boolean var1_108 = null;
                if ((var1_108 = Boolean.valueOf((p.column).intValue() > (p_to.column).intValue())).booleanValue()) 
                  var1_108 = Boolean.valueOf((p.column).intValue() < (p_from.column).intValue());
                if ((pred_107 = var1_108).booleanValue()) 
                  pred_107 = Boolean.valueOf((p.row).intValue() == (p_from.row).intValue());
                if (pred_107.booleanValue()) {
                  res_s_102.add(p);
                }
              }
            }
            pSet = (Set)UTIL.clone(res_s_102);
            if (!this.inv_Game().booleanValue()) 
              UTIL.RunTime("Instance invariant failure in Game");
          }
          else {
            Boolean cond_52 = null;
            if ((cond_52 = Boolean.valueOf((p_to.column).intValue() == (p_from.column).intValue())).booleanValue()) 
              cond_52 = Boolean.valueOf((p_to.row).intValue() < (p_from.row).intValue());
            if (cond_52.booleanValue()) {
              Set res_s_64 = new HashSet();
              {
                Set e1_set_68 = new HashSet(board.keySet());
                Position p = null;
                Set tmpSet_89 = new HashSet(e1_set_68);
                for (Iterator enm_88 = tmpSet_89.iterator(); enm_88.hasNext(); ) {
                  Position elem_87 = (Position)enm_88.next();
                  /* p */
                  p = elem_87;
                  Boolean pred_69 = null;
                  Boolean var1_70 = null;
                  if ((var1_70 = Boolean.valueOf((p.row).intValue() > (p_to.row).intValue())).booleanValue()) 
                    var1_70 = Boolean.valueOf((p.row).intValue() < (p_from.row).intValue());
                  if ((pred_69 = var1_70).booleanValue()) 
                    pred_69 = Boolean.valueOf((p.column).intValue() == (p_from.column).intValue());
                  if (pred_69.booleanValue()) {
                    res_s_64.add(p);
                  }
                }
              }
              pSet = (Set)UTIL.clone(res_s_64);
              if (!this.inv_Game().booleanValue()) 
                UTIL.RunTime("Instance invariant failure in Game");
            }
            else {
              Boolean cond_14 = null;
              if ((cond_14 = Boolean.valueOf((p_to.column).intValue() == (p_from.column).intValue())).booleanValue()) 
                cond_14 = Boolean.valueOf((p_to.row).intValue() > (p_from.row).intValue());
              {
                if (cond_14.booleanValue()) {
                  Set res_s_26 = new HashSet();
                  {
                    Set e1_set_30 = new HashSet(board.keySet());
                    Position p = null;
                    Set tmpSet_51 = new HashSet(e1_set_30);
                    for (Iterator enm_50 = tmpSet_51.iterator(); enm_50.hasNext(); ) {
                      Position elem_49 = (Position)enm_50.next();
                      /* p */
                      p = elem_49;
                      Boolean pred_31 = null;
                      Boolean var1_32 = null;
                      if ((var1_32 = Boolean.valueOf((p.row).intValue() < (p_to.row).intValue())).booleanValue()) 
                        var1_32 = Boolean.valueOf((p.row).intValue() > (p_from.row).intValue());
                      if ((pred_31 = var1_32).booleanValue()) 
                        pred_31 = Boolean.valueOf((p.column).intValue() == (p_from.column).intValue());
                      if (pred_31.booleanValue()) {
                        res_s_26.add(p);
                      }
                    }
                  }
                  pSet = (Set)UTIL.clone(res_s_26);
                  if (!this.inv_Game().booleanValue()) 
                    UTIL.RunTime("Instance invariant failure in Game");
                }
              }
            }
          }
        }
        boolean tmpQuant_156 = true;
        {
          Position p = null;
          Set tmpSet_168 = new HashSet(pSet);
          for (Iterator enm_167 = tmpSet_168.iterator(); enm_167.hasNext() && tmpQuant_156; ) {
            Position elem_166 = (Position)enm_167.next();
            /* p */
            p = elem_166;
            if (!UTIL.equals(((((Piece)board.get(p)).rank).name), new String("null"))) 
              tmpQuant_156 = false;
          }
        }
        return Boolean.valueOf(tmpQuant_156);
      }
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).checkMiddlePieces);
    }
  }
// ***** VDMTOOLS END Name=checkMiddlePieces#2|Position|Position


// ***** VDMTOOLS START Name=pre_checkMiddlePieces#2|Position|Position KEEP=NO
  public Boolean pre_checkMiddlePieces (final Position p_from, final Position p_to) throws CGException {
    return checkTurn(p_from);
  }
// ***** VDMTOOLS END Name=pre_checkMiddlePieces#2|Position|Position


// ***** VDMTOOLS START Name=checkMovement#2|Position|Position KEEP=NO
  public Boolean checkMovement (final Position p_from, final Position p_to) throws CGException {
    sentinel.entering(((GameSentinel)sentinel).checkMovement);
    try {
      if (!this.pre_checkMovement(p_from, p_to).booleanValue()) 
        UTIL.RunTime("Precondition failure in checkMovement");
      {
        Set pSet = new HashSet();
        Number length = null;
        Boolean cond_3 = null;
        if ((cond_3 = Boolean.valueOf((p_to.column).intValue() > (p_from.column).intValue())).booleanValue()) 
          cond_3 = Boolean.valueOf((p_to.row).intValue() == (p_from.row).intValue());
        if (cond_3.booleanValue()) {
          Set res_s_129 = new HashSet();
          {
            Set e1_set_133 = new HashSet(board.keySet());
            Position p = null;
            Set tmpSet_154 = new HashSet(e1_set_133);
            for (Iterator enm_153 = tmpSet_154.iterator(); enm_153.hasNext(); ) {
              Position elem_152 = (Position)enm_153.next();
              /* p */
              p = elem_152;
              Boolean pred_134 = null;
              Boolean var1_135 = null;
              if ((var1_135 = Boolean.valueOf((p.column).intValue() < (p_to.column).intValue())).booleanValue()) 
                var1_135 = Boolean.valueOf((p.column).intValue() > (p_from.column).intValue());
              if ((pred_134 = var1_135).booleanValue()) 
                pred_134 = Boolean.valueOf((p.row).intValue() == (p_from.row).intValue());
              if (pred_134.booleanValue()) {
                res_s_129.add(p);
              }
            }
          }
          pSet = (Set)UTIL.clone(res_s_129);
          if (!this.inv_Game().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Game");
        }
        else {
          Boolean cond_90 = null;
          if ((cond_90 = Boolean.valueOf((p_to.column).intValue() < (p_from.column).intValue())).booleanValue()) 
            cond_90 = Boolean.valueOf((p_to.row).intValue() == (p_from.row).intValue());
          if (cond_90.booleanValue()) {
            Set res_s_102 = new HashSet();
            {
              Set e1_set_106 = new HashSet(board.keySet());
              Position p = null;
              Set tmpSet_127 = new HashSet(e1_set_106);
              for (Iterator enm_126 = tmpSet_127.iterator(); enm_126.hasNext(); ) {
                Position elem_125 = (Position)enm_126.next();
                /* p */
                p = elem_125;
                Boolean pred_107 = null;
                Boolean var1_108 = null;
                if ((var1_108 = Boolean.valueOf((p.column).intValue() > (p_to.column).intValue())).booleanValue()) 
                  var1_108 = Boolean.valueOf((p.column).intValue() < (p_from.column).intValue());
                if ((pred_107 = var1_108).booleanValue()) 
                  pred_107 = Boolean.valueOf((p.row).intValue() == (p_from.row).intValue());
                if (pred_107.booleanValue()) {
                  res_s_102.add(p);
                }
              }
            }
            pSet = (Set)UTIL.clone(res_s_102);
            if (!this.inv_Game().booleanValue()) 
              UTIL.RunTime("Instance invariant failure in Game");
          }
          else {
            Boolean cond_52 = null;
            if ((cond_52 = Boolean.valueOf((p_to.column).intValue() == (p_from.column).intValue())).booleanValue()) 
              cond_52 = Boolean.valueOf((p_to.row).intValue() < (p_from.row).intValue());
            if (cond_52.booleanValue()) {
              Set res_s_64 = new HashSet();
              {
                Set e1_set_68 = new HashSet(board.keySet());
                Position p = null;
                Set tmpSet_89 = new HashSet(e1_set_68);
                for (Iterator enm_88 = tmpSet_89.iterator(); enm_88.hasNext(); ) {
                  Position elem_87 = (Position)enm_88.next();
                  /* p */
                  p = elem_87;
                  Boolean pred_69 = null;
                  Boolean var1_70 = null;
                  if ((var1_70 = Boolean.valueOf((p.row).intValue() > (p_to.row).intValue())).booleanValue()) 
                    var1_70 = Boolean.valueOf((p.row).intValue() < (p_from.row).intValue());
                  if ((pred_69 = var1_70).booleanValue()) 
                    pred_69 = Boolean.valueOf((p.column).intValue() == (p_from.column).intValue());
                  if (pred_69.booleanValue()) {
                    res_s_64.add(p);
                  }
                }
              }
              pSet = (Set)UTIL.clone(res_s_64);
              if (!this.inv_Game().booleanValue()) 
                UTIL.RunTime("Instance invariant failure in Game");
            }
            else {
              Boolean cond_14 = null;
              if ((cond_14 = Boolean.valueOf((p_to.column).intValue() == (p_from.column).intValue())).booleanValue()) 
                cond_14 = Boolean.valueOf((p_to.row).intValue() > (p_from.row).intValue());
              {
                if (cond_14.booleanValue()) {
                  Set res_s_26 = new HashSet();
                  {
                    Set e1_set_30 = new HashSet(board.keySet());
                    Position p = null;
                    Set tmpSet_51 = new HashSet(e1_set_30);
                    for (Iterator enm_50 = tmpSet_51.iterator(); enm_50.hasNext(); ) {
                      Position elem_49 = (Position)enm_50.next();
                      /* p */
                      p = elem_49;
                      Boolean pred_31 = null;
                      Boolean var1_32 = null;
                      if ((var1_32 = Boolean.valueOf((p.row).intValue() < (p_to.row).intValue())).booleanValue()) 
                        var1_32 = Boolean.valueOf((p.row).intValue() > (p_from.row).intValue());
                      if ((pred_31 = var1_32).booleanValue()) 
                        pred_31 = Boolean.valueOf((p.column).intValue() == (p_from.column).intValue());
                      if (pred_31.booleanValue()) {
                        res_s_26.add(p);
                      }
                    }
                  }
                  pSet = (Set)UTIL.clone(res_s_26);
                  if (!this.inv_Game().booleanValue()) 
                    UTIL.RunTime("Instance invariant failure in Game");
                }
              }
            }
          }
        }
        length = new Integer(pSet.size());
        if (!this.inv_Game().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Game");
        length = new Integer(length.intValue() + 1);
        if (!this.inv_Game().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Game");
        return Boolean.valueOf(length.intValue() <= ((((Piece)board.get(p_from)).rank).movement).intValue());
      }
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).checkMovement);
    }
  }
// ***** VDMTOOLS END Name=checkMovement#2|Position|Position


// ***** VDMTOOLS START Name=pre_checkMovement#2|Position|Position KEEP=NO
  public Boolean pre_checkMovement (final Position p_from, final Position p_to) throws CGException {
    return checkTurn(p_from);
  }
// ***** VDMTOOLS END Name=pre_checkMovement#2|Position|Position


// ***** VDMTOOLS START Name=validMove#4|Number|Number|Number|Number KEEP=NO
  public Boolean validMove (final Number fc, final Number fr, final Number tc, final Number tr) throws CGException {
    sentinel.entering(((GameSentinel)sentinel).validMove);
    try {
      if (!this.pre_validMove(fc, fr, tc, tr).booleanValue()) 
        UTIL.RunTime("Precondition failure in validMove");
      {
        Position p1 = new Position(fc, fr);
        Position p2 = new Position(tc, tr);
        Set positions = new HashSet();
        positions.add(p1);
        positions.add(p2);
        Boolean rexpr_11 = null;
        Boolean var1_12 = null;
        Boolean var1_13 = null;
        Boolean var1_14 = null;
        Boolean var1_15 = null;
        if ((var1_15 = Boolean.valueOf(new HashSet(board.keySet()).containsAll(positions))).booleanValue()) 
          var1_15 = Boolean.valueOf(!UTIL.equals(p1, p2));
        if ((var1_14 = var1_15).booleanValue()) 
          var1_14 = checkHorV(p1, p2);
        if ((var1_13 = var1_14).booleanValue()) 
          var1_13 = checkToPositionColor(p1, p2);
        if ((var1_12 = var1_13).booleanValue()) 
          var1_12 = checkMiddlePieces(p1, p2);
        if ((rexpr_11 = var1_12).booleanValue()) 
          rexpr_11 = checkMovement(p1, p2);
        return rexpr_11;
      }
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).validMove);
    }
  }
// ***** VDMTOOLS END Name=validMove#4|Number|Number|Number|Number


// ***** VDMTOOLS START Name=pre_validMove#4|Number|Number|Number|Number KEEP=NO
  public Boolean pre_validMove (final Number fc, final Number fr, final Number tc, final Number tr) throws CGException {
    Boolean varRes_5 = null;
    Boolean var1_6 = null;
    Boolean var1_7 = null;
    Boolean var1_8 = null;
    Boolean var1_9 = null;
    Boolean var1_10 = null;
    Boolean var1_11 = null;
    if ((var1_11 = Boolean.valueOf(fc.intValue() >= 0)).booleanValue()) 
      var1_11 = Boolean.valueOf(fc.intValue() <= 9);
    if ((var1_10 = var1_11).booleanValue()) 
      var1_10 = Boolean.valueOf(fr.intValue() >= 0);
    if ((var1_9 = var1_10).booleanValue()) 
      var1_9 = Boolean.valueOf(fr.intValue() <= 9);
    if ((var1_8 = var1_9).booleanValue()) 
      var1_8 = Boolean.valueOf(tc.intValue() >= 0);
    if ((var1_7 = var1_8).booleanValue()) 
      var1_7 = Boolean.valueOf(tc.intValue() <= 9);
    if ((var1_6 = var1_7).booleanValue()) 
      var1_6 = Boolean.valueOf(tr.intValue() >= 0);
    if ((varRes_5 = var1_6).booleanValue()) 
      varRes_5 = Boolean.valueOf(tr.intValue() <= 9);
    return varRes_5;
  }
// ***** VDMTOOLS END Name=pre_validMove#4|Number|Number|Number|Number


// ***** VDMTOOLS START Name=validSwapPositions#4|Number|Number|Number|Number KEEP=NO
  public Boolean validSwapPositions (final Number fc, final Number fr, final Number tc, final Number tr) throws CGException {
    sentinel.entering(((GameSentinel)sentinel).validSwapPositions);
    try {
      Set pSet = new HashSet();
      pSet.add(new Position(fc, fr));
      pSet.add(new Position(tc, tr));
      boolean tmpQuant_12 = true;
      {
        Position p1 = null;
        Position p2 = null;
        Set e_set_27 = pSet;
        Set tmpSet_30 = new HashSet(e_set_27);
        for (Iterator enm_29 = tmpSet_30.iterator(); enm_29.hasNext() && tmpQuant_12; ) {
          Position elem_28 = (Position)enm_29.next();
          /* p2 */
          p2 = elem_28;
          Set tmpSet_26 = new HashSet(pSet);
          for (Iterator enm_25 = tmpSet_26.iterator(); enm_25.hasNext() && tmpQuant_12; ) {
            Position elem_24 = (Position)enm_25.next();
            /* p1 */
            p1 = elem_24;
            if (!UTIL.equals(((getPiece(p1).color).name), ((getPiece(p2).color).name))) 
              tmpQuant_12 = false;
          }
        }
      }
      return Boolean.valueOf(tmpQuant_12);
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).validSwapPositions);
    }
  }
// ***** VDMTOOLS END Name=validSwapPositions#4|Number|Number|Number|Number


// ***** VDMTOOLS START Name=swapPositions#4|Number|Number|Number|Number KEEP=NO
  public void swapPositions (final Number fc, final Number fr, final Number tc, final Number tr) throws CGException {
    sentinel.entering(((GameSentinel)sentinel).swapPositions);
    try {
      if (!this.pre_swapPositions(fc, fr, tc, tr).booleanValue()) 
        UTIL.RunTime("Precondition failure in swapPositions");
      {
        Position p1 = new Position(fc, fr);
        Position p2 = new Position(tc, tr);
        Piece piece1 = getClonePiece(p1);
        Piece piece2 = getClonePiece(p2);
        addPiece(p1, piece2);
        addPiece(p2, piece1);
      }
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).swapPositions);
    }
  }
// ***** VDMTOOLS END Name=swapPositions#4|Number|Number|Number|Number


// ***** VDMTOOLS START Name=pre_swapPositions#4|Number|Number|Number|Number KEEP=NO
  public Boolean pre_swapPositions (final Number fc, final Number fr, final Number tc, final Number tr) throws CGException {
    return validSwapPositions(fc, fr, tc, tr);
  }
// ***** VDMTOOLS END Name=pre_swapPositions#4|Number|Number|Number|Number


// ***** VDMTOOLS START Name=move#4|Number|Number|Number|Number KEEP=NO
  public void move (final Number fc, final Number fr, final Number tc, final Number tr) throws CGException {
    sentinel.entering(((GameSentinel)sentinel).move);
    try {
      if (!this.pre_move(fc, fr, tc, tr).booleanValue()) 
        UTIL.RunTime("Precondition failure in move");
      {
        Position p1 = new Position(fc, fr);
        Position p2 = new Position(tc, tr);
        if (UTIL.equals(finish, Boolean.FALSE)) {
          Boolean cond_12 = null;
          Boolean var1_13 = null;
          if (!(var1_13 = Boolean.valueOf(UTIL.equals(((getPiece(p2).rank).name), new String("null")))).booleanValue()) {
            Boolean var2_20 = null;
            if ((var2_20 = Boolean.valueOf(UTIL.equals(((getPiece(p1).rank).name), new String("spy")))).booleanValue()) 
              var2_20 = Boolean.valueOf(UTIL.equals(((getPiece(p2).rank).name), new String("ten")));
            var1_13 = var2_20;
          }
          if (!(cond_12 = var1_13).booleanValue()) {
            Boolean var2_33 = null;
            if ((var2_33 = Boolean.valueOf(UTIL.equals(((getPiece(p1).rank).name), new String("three")))).booleanValue()) 
              var2_33 = Boolean.valueOf(UTIL.equals(((getPiece(p2).rank).name), new String("bomb")));
            cond_12 = var2_33;
          }
          if (cond_12.booleanValue()) {
            addPiece(p2, getClonePiece(p1));
            addPiece(p1, emptyPiece());
            changeTurn();
          }
          else if (UTIL.equals(((getPiece(p2).rank).name), new String("bomb"))) {
            addPiece(p2, emptyPiece());
            addPiece(p1, emptyPiece());
            changeTurn();
          }
          else {
            if (UTIL.equals(((getPiece(p2).rank).name), new String("flag"))) {
              finish = Boolean.TRUE;
              if (!this.inv_Game().booleanValue()) 
                UTIL.RunTime("Instance invariant failure in Game");
            }
            else {
              if (((getPiece(p2).rank).number).intValue() > ((getPiece(p1).rank).number).intValue()) {
                addPiece(p1, emptyPiece());
                changeTurn();
              }
              else {
                if (((getPiece(p2).rank).number).intValue() < ((getPiece(p1).rank).number).intValue()) {
                  addPiece(p2, getClonePiece(p1));
                  addPiece(p1, emptyPiece());
                  changeTurn();
                }
              }
            }
          }
        }
      }
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).move);
    }
  }
// ***** VDMTOOLS END Name=move#4|Number|Number|Number|Number


// ***** VDMTOOLS START Name=pre_move#4|Number|Number|Number|Number KEEP=NO
  public Boolean pre_move (final Number fc, final Number fr, final Number tc, final Number tr) throws CGException {
    return validMove(fc, fr, tc, tr);
  }
// ***** VDMTOOLS END Name=pre_move#4|Number|Number|Number|Number


// ***** VDMTOOLS START Name=gameEnded KEEP=NO
  public Boolean gameEnded () throws CGException {
    sentinel.entering(((GameSentinel)sentinel).gameEnded);
    try {
      return finish;
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).gameEnded);
    }
  }
// ***** VDMTOOLS END Name=gameEnded


// ***** VDMTOOLS START Name=getWinner KEEP=NO
  public String getWinner () throws CGException {
    sentinel.entering(((GameSentinel)sentinel).getWinner);
    try {
      if (UTIL.equals(finish, Boolean.TRUE)) 
        return turn;
      return "null";
    }
    finally {
      sentinel.leaving(((GameSentinel)sentinel).getWinner);
    }
  }
// ***** VDMTOOLS END Name=getWinner

}
;
